@startuml
'https://plantuml.com/class-diagram

skinparam class {
  ' задаем светлозеленый цвет для фона классов по умолчанию
  BackgroundColor LightGreen
  ' задаем синий цвет для связей классов по умолчанию
  ArrowColor      Green
  ' задаем красный цвет для контуров классов по умолчанию
  BorderColor     Green
}

package "model" {
    +class Task <<Serializable>> {
          -title:String
          -active:boolean
          -repeat:boolean
          -time:LocalDateTime
          -start:LocalDateTime
          -end:LocalDateTime
          -interval:int
          +resetTimeInterval():void
          +nextTimeAfter(current:LocalDateTime):LocalDateTime
    }

    +class TaskIO {
          +write(tasks:AbstractTaskList, out:OutputStream):void
          +read(tasks:AbstractTaskList, inputStream:InputStream):void
          +writeBinary(tasks:AbstractTaskList, file:File):void
          +readBinary(tasks:AbstractTaskList, file:File):void

          +write(tasks:AbstractTaskList, out:Writer):void
          +read(tasks:AbstractTaskList, in:Reader):void
          +writeText(tasks:AbstractTaskList, file:File):void
          +readTeaxt(tasks:AbstractTaskList, file:File):void
    }

    +class Tasks {
          +incoming(tasks:Iterable<Task>, start:LocalDateTime, end:LocalDateTime):Iterable<Task>
          +calendar(tasks:Iterable<Task>, start:LocalDateTime, end:LocalDateTime):SortedMap<LocalDateTime, Set<Task>>
          +getSortedTasksFrom(list:AbstractTaskList):Task[]
    }

    +abstract class AbstractTaskList <<Iterable>>,<<Cloneable>>, <<Serializable>> {
             +abstract getTask(index:int):Task
             +abstract remove(task:Task):boolean
             +abstract size():int
             +abstract getFirstTask():Task
             +abstract getLastTask():Task
             +abstract add(task:Task):void
             +abstract setNotificator(ntf:Notificator):void
             +abstract getStream():Stream<Task>

             +final incoming(from:LocalDateTime, to:LocalDateTime):AbstractTaskList
             +addAll(tasks:Task[]):void
             +addAllFromList(tasks:AbstractTaskList):void
             +getMinTask():Task
             +getMaxTask():Task
    }

    AbstractTaskList ..> Task
    TaskIO ..> AbstractTaskList
    Tasks ..> AbstractTaskList
    ListTypes *-- types
    TaskListFactory .> ListTypes
    AbstractTaskList ..> ListTypes
    AbstractTaskList ..> TaskListFactory
    Tasks ..> ListTypes
    Tasks ..> TaskListFactory

    +class ArrayTaskList extends AbstractTaskList {
          -list:Task[]
          -ntf:Notificator

          +add(task:Task):void
          +remove(task:Task):boolean
          +size():int
          +getTask(index:int):Task
          +getFirstTask():Task
          +getLastTask():Task
          +iterator():Iterator<Task>
          +getStream():Stream<Task>

          +setNotificator(ntf:Notificator):void
    }
    Task "...n" --* "1" ArrayTaskList
    ArrayTaskList ..> Notificator

    +class LinkedTaskList extends AbstractTaskList {
          -first:Node
          -last:Node
          -ntf:Notificator

          +add(task:Task):void
          +remove():boolean
          +remove(task:Task):boolean
          +size():int
          +getTask(index:int):Task
          +getLastTask():Task
          +getFirstTask():Task
          +isEmpty():boolean
          +iterator():Iterator<Task>
          +getStream():Stream<Task>

          +setNotificator(ntf:Notificator):void
    }
    class Node {
         -item:Task
         -nextNode:Node
         -prevNode:Node
         +setNextNode(nextNode:Node):void
         +setPrevNode(prevNode:Node):void
         +getNextNode():Node
         +getPrevNode():Node
         +getItem():Task
    }
    LinkedTaskList "1" *-- "...n" Node
    LinkedTaskList ..> Notificator
    Task --o Node

    +class TaskListFactory {
          +static createTaskList(type:ListType.type):AbstractTaskList
    }
    +class ListTypes{
          +types:enum
          +static getTypeList(taskObj:Iterable<Task>):ListTypes.types
    }
    +enum types{
         ARRAY
         LINKED
    }

    +class Notification {
          -task:Task
          -notifyDates:LocalDateTime[]

          +updateDates():void
          +isActual():boolean
          +isTimeToNotify(time:LocalDateTime):boolean
          +toNotify(notifuTime:LocalDateTime):void
          +checkTask():void

          +static compareTimes(t:LocalDateTime, t2:LocalDateTime):int
          +static timesEquals(t:LocalDateTime, t2:LocalDateTime):boolean
    }
    Task ..> Notification

    +class NotificationThread extends Thread {
          -ntf:Notification
          +run():void
    }
    Notification ..> NotificationThread

    +class Notificator {
          -list:AbstractTaskList
          -ntfs:ArrayList<NotificationThread>

          +assignThreads():void
          +startThreads():void
          +assignThreadToTask(task:Task):void
          +removeThreadForTask(task:Task):void
    }
    AbstractTaskList .> Notificator
    NotificationThread "...n" --o "1" Notificator
}

@enduml